É possível adicionar labels na passagem de parametro para construção de um objeto ou usando em outras funções.
Dessa forma é possível não seguir necessáriamente, a ordem do construtor
val contaTiago = modelo.Conta(titular = "Tiago", conta = 1000) - Named Arguments

class modelo.Conta(
    private val titular: String,
    private val numero: Int = 0) { é possível definir um valor padrão no construtor, para caso não seja informado, o
                                   código adiciona um default

// No caso de construtor primário que só inicializa o objeto, não é necessário declarar o constructor dessa maneira
//    constructor(titular: String, numero: Int) {
//        this.titular = titular
//        this.numero = numero
//    }


// Não é necessário a declaração dos getters e seters devido abordagem de properties do kotlin
//    fun setTitular(titular: String) {
//        this.titular = titular
//    }
//
//    fun setConta(conta: Int) {
//        this.numero = conta
//    }
//
//    fun getSaldo(): Double {
//        return this.saldo
//    }
//
//    fun setSaldo(valor: Double) {
//        if (valor > 0) {
//            this.saldo = valor
//        }
//    }


//fun testaCopiasEReferencias() {
//    val numeroX = 10
//    var numeroY = numeroX
//    numeroY++
//
//    println("Numero X $numeroX")
//    println("Numero Y $numeroY")
//
//    val contaJoao = modelo.Conta()
//    contaJoao.titular = "João"
//
//    // var contaMaria = contaJoao cópia de referência, alterando em um objeto altera nos dois
//    val contaMaria = modelo.Conta()
//    contaMaria.titular = "Maria"
//
//    println("Titular conta João: ${contaJoao.titular}")
//    println("Titular conta Maria: ${contaMaria.titular}")
//
//    /*println(contaJoao) imprime a referência de um objeto
//    println(contaMaria)*/
//}

// fun testaLacos() {
//
// var i = 0
// while(i < 5) {
// val titular = "Tiago Leite $i"
// val numeroConta = 1000 + i
// var saldo = 10.0
// saldo += i
//
// println("Titular: $titular")
// println("Número da conta: $numeroConta")
// println("Saldo da conta: $saldo")
//
// testaCondicao(saldo, numeroConta)
// println()
// i++
//
// }
//
// @Suppress("NAME_SHADOWING")
// for (i in 1..5) { //para decrescente, usar downTo (i in 5 downTo 1)
//
// //Usar step para configurar a forma de incrementação (i in 5 downTo 1 step 2) - pula de 2 em 2
// if (i == 4) {
// continue // continue no laço de repetição força o próximo passo. break força a finalização do loop
// }
// //var ou val para variávies - val não pode ser alterado
// /*No caso do uso de var, sempre inicializar antes de atribuir novo valor ou utilizar a variável.
// No caso de val, necessário inicialização*/
// //Para declarar, usar : e o tipo. Ex: val titular: String = "Tiago Leite"
// val titular = "Tiago Leite $i"
// val numeroConta = 1000 + i
// //Double declarado implicitamente deve-se usar 0 . para informar que é um decimal
// var saldo = 10.0
// saldo += i
//
// //String template usando "$" e a variável desejada pode substituir a concatenação ("" + "")
// println("Titular: $titular")
// println("Número da conta: $numeroConta")
// println("Saldo da conta: $saldo")
//
// /*for (i in 1..3) {
// println(i)
// }*/
//
// testaCondicao(saldo, numeroConta)
// println()
//
// }
// }
//
// fun testaCondicao(saldo: Double, numeroConta: Int) { //Passando parâmetro em Kotlin, necessário declarar o tipo
//
// when {
// saldo > 0.0 -> println("A conta $numeroConta é positiva. Saldo: $saldo")
// saldo == 0.0 -> println("A conta $numeroConta é neutra. (saldo zerado)")
// else -> println("A conta $numeroConta é negativa. Saldo: $saldo")
// }
//
// /*if (saldo > 0.0) { //Para linha única na instrução de execução, podem ser ocultadas as chaves "{ }"
// println("A conta $numeroConta é positiva. Saldo: $saldo")
// } else if (saldo == 0.0) {
// println("A conta $numeroConta é neutra. (saldo zerado)")
// } else {
// println("A conta $numeroConta é negativa. Saldo: $saldo")
// }*/
// }